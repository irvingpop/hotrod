// Code generated by "esc -pkg frontend -o services/frontend/gen_assets.go -prefix services/frontend/web_assets services/frontend/web_assets"; DO NOT EDIT.

package frontend

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/index.html": {
		name:    "index.html",
		local:   "services/frontend/web_assets/index.html",
		size:    3580,
		modtime: 1598478816,
		compressed: `
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
`,
	},

	"/": {
		name:  "/",
		local: `services/frontend/web_assets`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"services/frontend/web_assets": {
		_escData["/index.html"],
	},
}
